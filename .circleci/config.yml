version: 2
jobs:
  prepare:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Decode google-services.json from env-vars
          command: echo $ENCODED_GOOGLE_SERVICE_JSON | base64 --decode > app/google-services.json
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  ktlint:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3g
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run ktlint
          command: ./gradlew ktlint

  unit_tests:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3g
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Decode google-services.json from env-vars
          command: echo $ENCODED_GOOGLE_SERVICE_JSON | base64 --decode > app/google-services.json
      - run:
          name: Run User Tests
          command: ./gradlew testUserDebugUnitTest -x lint
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results

  #  espresso_tests:
  #    working_directory: ~/code
  #    docker:
  #      - image: circleci/android:api-28-alpha
  #    environment:
  #      JVM_OPTS: -Xmx4g
  #    steps:
  #      - checkout
  #      - restore_cache:
  #          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
  #      - run:
  #          name: Build debug APK and release APK
  #          command: |
  #            ./gradlew :app:assembleDebug
  #            ./gradlew :app:assembleAndroidTest
  #      - run:
  #          name: Set up Google Cloud API calls
  #          command: |
  #            echo ${TEST_CLOUD_KEY} > ${HOME}/gcp-key.json
  #            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
  #            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
  #      - run:
  #          name: Configure environment
  #          command: |
  #            echo 'export APK_PATH=`find . -path "*.apk" ! -path "*unaligned.apk" ! -path "*Test*.apk" -print -quit`' >> $BASH_ENV
  #            echo 'export TEST_APK_PATH=`find "." "-path" "*Test*.apk" -print -quit`' >> $BASH_ENV
  #      - run:
  #          name: Run UI Tests
  #          command: gcloud firebase test android run --type instrumentation --app ${APK_PATH} --test ${TEST_APK_PATH} --device model=Nexus6P,version=27,locale=en,orientation=portrait --timeout 30m
  #          no_output_timeout: 30m
  #      - store_test_results:
  #          path: app/build/test-results

  deploy:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3g
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Decode google-services.json from env-vars
          command: echo $ENCODED_GOOGLE_SERVICE_JSON | base64 --decode > app/google-services.json
      - run:
          name: Decode and store Keystore
          command: |
            echo $ENCODED_KEYSTORE | base64 --decode >> ${HOME}/keystore
            echo 'export KEYSTORE=${HOME}/keystore' >> $BASH_ENV
      - run:
          name: Build bundle
          command: ./gradlew :app:bundleUser
      - run:
          name: Decode and store Private Key
          command: |
            echo $DEPLOYMENT_PRIVATE_KEY | base64 --decode >> ${HOME}/rxstarter_pk.json
            echo 'export PRIVATE_KEY=${HOME}/rxstarter_pk.json' >> $BASH_ENV
      - run:
          name: Upload to Google Play
          command: ./gradlew publishUserRelease

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - prepare
      - ktlint:
          requires:
            - prepare
      - unit_tests:
          requires:
            - prepare
      - hold:
          type: approval
          requires:
            - ktlint
            - unit_tests
          filters:
            branches:
              only:
              - master
              - /release\/.*/ # all branches starting with release/
              - automatic_deployment
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
              - master
              - /release\/.*/ # all branches starting with release
              - automatic_deployment