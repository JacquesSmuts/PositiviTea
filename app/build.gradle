plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'com.github.triplet.play' version '2.1.0'
}

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "com.jacquessmuts.positivitea"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionName "0.1.1"
        versionCode getBuildVersion() as int
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        archivesBaseName = "positivitea-$versionName-$versionCode"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "keystore.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "access"
    productFlavors {
        user {

        }
        moderator {

        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

// Don't name this getVersionCode() or things will break
def getBuildVersion() {
    def version = 1
    def buildNumber = System.getenv("CIRCLE_BUILD_NUM")
    if (buildNumber != null) {
        version += buildNumber
    }
    println("VersionCode: " + version)
    return version
}

// Configuration for com.github.triplet.play deployment
play {
    track = 'alpha'
    serviceAccountCredentials = file(System.getenv("PRIVATE_KEY") ?: "private_key.json")
    resolutionStrategy = "ignore" //If the deployment fails due to an API error, don't fail the CI Build
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(path: ':api')

    // Local modules
    implementation project(':core')

    // Official Android
    implementation deps.android.core
    implementation deps.android.appCompat
    implementation deps.android.constraintLayout
    implementation "androidx.work:work-runtime-ktx:2.0.0"
    implementation "android.arch.lifecycle:extensions:$versions.android.lifecycle"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    kapt "android.arch.lifecycle:compiler:$versions.android.lifecycle"

    // Database
    implementation "androidx.room:room-runtime:$versions.android.room"
    implementation "androidx.room:room-rxjava2:$versions.android.room"
    implementation "androidx.room:room-coroutines:$versions.android.room"
    kapt "androidx.room:room-compiler:$versions.android.room"

    // Dependency Injection
    implementation deps.kodein.core
    implementation deps.kodein.android

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rx.android"
    implementation "io.reactivex.rxjava2:rxjava:$versions.rx.core"
    implementation "io.reactivex.rxjava2:rxkotlin:$versions.rx.kotlin"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$versions.rx.binding"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:$versions.rx.binding"
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.0'

    // Testing
    testImplementation deps.testing.kotlin
    testImplementation deps.testing.junit
    testImplementation deps.testing.androidxcore
    testImplementation deps.testing.mockitocore
    androidTestImplementation deps.testing.androidxrunner
    androidTestImplementation deps.testing.espressocore

}

apply plugin: 'com.google.gms.google-services'
